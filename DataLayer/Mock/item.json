{
  "rendered_body": "<p>みなさんはKubernetesはどうやって使っていますか？</p>\n\n<p>仕事とは関係なく趣味レベルですが，<br>\n私のチームでは以前からGKEやIBM Cloudをメインとしてパブリック環境のKubernetesを使っていました。(OpenShift Onlineもほんの少し)</p>\n\n<p>k8sの選択肢は，クラウドのホスティングサービス，ターンキーでIaaSに入れるパターン，ソフトとして自身で導入・構築するパターン，色々あると思います。さらに，開発での利用，また運用，チームによって使い方も違いますよね。</p>\n\n<p>俺達はこうやってるぜ！みたいな情報を積極的に出せる場があると良いですね。きっと需要もあるし，互いに共有する価値もあると思っています。ぜひぜひ教えてくださいませ。</p>\n\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>本日は，<a href=\"https://qiita.com/advent-calendar/2017/kubernetes2\">Kubernetes2 Advent Calendar 2017</a> 17日目になります。</p>\n\n<p>今回は，プライベート環境で開発用途なら無償で利用できる<br>\n <strong>IBM Cloud Private CE (Community Edition)</strong> を使ってみたいと思います。</p>\n\n<p>IBM Cloud Private CE のインストールがまだの場合でも誰でも導入できるので，<a href=\"https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae\" id=\"reference-abd450006a02ed5f5e16\">こちら</a> を参考にしてください。</p>\n\n<p>この記事では <strong>\"アプリを作って，IBM Cloud Privateにデプロイ\"</strong> という基本的な部分を実施したいと思います。</p>\n\n<p>この後説明する，Microservice Builderというツールを使ってアプリを開発します。</p>\n\n<p>参考: <a href=\"https://developer.ibm.com/microservice-builder/\" rel=\"nofollow noopener\" target=\"_blank\">\"Microservice Builder\"</a></p>\n\n<h1>\n<span id=\"microservice-builder-とは\" class=\"fragment\"></span><a href=\"#microservice-builder-%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Microservice Builder とは</h1>\n\n<p>様々なオープンテクノロジーを活用し，マイクロサービスアプリをスピード開発・デプロイするためのツールです。</p>\n\n<p>一度アプリを作った後は，ソースコードをリポジトリにpushするだけで自動的にビルド・テストが行われ，IBM Cloud Privateにデプロイされるようになります。</p>\n\n<p>ぱっとイメージが湧く方向けに結論を先に伝えると，<br>\n\"Webhook + Jenkins Pipeline\" を使って，Docker Imageをprivate registryに登録してバージョン管理し，諸々のステージを経て，Kubernetes環境にhelm releaseするイメージです。</p>\n\n<p>そのために，アプリを作った瞬間からCI/CDの初期構成が組まれます。<br>\n※CI: Continuous Integration (継続的インテグレーション)<br>\n※CD: Continuous Delivery (継続的デリバリー)</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">雛形プロジェクトの初期構成 (抜粋)</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">Example.java</td>\n<td style=\"text-align: left\">JAX-RSのリソースクラス1つ</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">pom.xml</td>\n<td style=\"text-align: left\">Mavenビルド</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">jenkinsfile</td>\n<td style=\"text-align: left\">Jenkins Pipeline</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Dockerfile</td>\n<td style=\"text-align: left\">Dockerイメージビルド</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">kube.deploy.yml</td>\n<td style=\"text-align: left\">Kubernetesへのデプロイ</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">chartディレクトリ</td>\n<td style=\"text-align: left\">helm chart</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">その他</td>\n<td style=\"text-align: left\">-</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id=\"環境-と-進め方\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83-%E3%81%A8-%E9%80%B2%E3%82%81%E6%96%B9\"><i class=\"fa fa-link\"></i></a>環境 と 進め方</h1>\n\n<p>以下の2段構成で紹介します。</p>\n\n<ul>\n<li>(前半戦) Microservice Builderでアプリを作ってローカル環境でコンテナ稼働させる</li>\n<li>(後半戦) IBM Cloud Private上(k8s)に自動デプロイされるように構成する</li>\n</ul>\n\n<p>環境については，開発環境はMac，デプロイ先はUbuntu上に構築したIBM Cloud Privateとします。</p>\n\n<h2>\n<span id=\"開発環境\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>開発環境</h2>\n\n<p>macOS 10.13.1<br>\nDocker for Mac V17.09.1<br>\niTerm V3.0.15</p>\n\n<p>(なんとなく今日はMacbook Air 11使ってます)</p>\n\n<h2>\n<span id=\"デプロイ先となる環境\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E5%85%88%E3%81%A8%E3%81%AA%E3%82%8B%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>デプロイ先となる環境</h2>\n\n<p>IBM Cloud Private CE (Community Edition) V2.1.0<br>\n(※以降，IBM Cloud privateをICPと表現する場合があります)</p>\n\n<p>注意:<br>\nICP未インストールの場合は先にインストールしてください。<br>\n時間課金のAWSやIBM CloudなどのIaaSを使うのもありだと思います。</p>\n\n<p>参考: <a href=\"https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae\">\"IBM Cloud Private: Kubernetesをオンプレミス(IaaS)に導入してみる\"</a></p>\n\n<h1>\n<span id=\"前半戦-microservice-builderでアプリを作ってローカル環境でコンテナ稼働させる\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%8D%8A%E6%88%A6-microservice-builder%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E7%A8%BC%E5%83%8D%E3%81%95%E3%81%9B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>(前半戦) Microservice Builderでアプリを作ってローカル環境でコンテナ稼働させる</h1>\n\n<h2>\n<span id=\"コマンドの事前準備\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>コマンドの事前準備</h2>\n\n<h3>\n<span id=\"bxコマンド-ibm-cloud-cli-を導入する\" class=\"fragment\"></span><a href=\"#bx%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89-ibm-cloud-cli-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>bxコマンド (IBM Cloud CLI) を導入する</h3>\n\n<p><a href=\"https://console.bluemix.net/docs/cli/reference/bluemix_cli/all_versions.html#ibm-cloud-cli-installer-all-versions\" rel=\"nofollow noopener\" target=\"_blank\">IBM Cloud CLI Installer</a> からお使いのPCにあったものをインストールすればOKです。<br>\nインストール後にバージョン確認した結果は以下です。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ bx --version\n\nbx version 0.6.2+040af8db-2017-11-17T08:37:05+00:00\n</pre></div></div>\n\n<p><a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#2-1-ibm-cloud-cli-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" id=\"reference-fe298b95216540b65f8b\">こちら</a> に画面イメージ付きで導入手順がありますので，必要に応じて参照ください。</p>\n\n<h3>\n<span id=\"bx-devプラグインを導入する\" class=\"fragment\"></span><a href=\"#bx-dev%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>bx devプラグインを導入する</h3>\n\n<p>bxコマンドでdevプラグインを導入します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ bx plugin install dev\n</pre></div></div>\n\n<p>ヘルプを確認します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ bx plugin show dev   // bx dev helpでも確認できます\n\nPlugin                         dev\nVersion                        1.1.0\nMinimal CLI version required   0.4.2\n\nCommands:\ndev build             Build the project in a local container\ndev code              Download the code from a project\ndev console           Opens the IBM Cloud console for a project\ndev create            Creates a new project and gives you the option to add services\ndev debug             Debug your application in a local container\ndev delete            Deletes a project from your space\ndev deploy            Deploy an application to IBM Cloud\ndev enable            Add IBM Cloud files to an existing project.\ndev get-credentials   Gets credentials required by the project to enable use of bound services.\ndev list              List all IBM Cloud projects in a space\ndev run               Run your application in a local container\ndev shell             Open a shell into a local container\ndev status            Check the status of the containers used by the CLI\ndev stop              Stop a container\ndev test              Test your application in a local container\ndev view              View the URL of your project\ndev help              Show help\n</pre></div></div>\n\n<h2>\n<span id=\"新規アプリを作る-bx-dev-createbuildrun\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E8%A6%8F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B-bx-dev-createbuildrun\"><i class=\"fa fa-link\"></i></a>新規アプリを作る (bx dev create/build/run)</h2>\n\n<p>さきほど導入した，bxコマンドおよびdevプラグインで，以下の操作が行えます。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">コマンド</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">bx dev create</td>\n<td style=\"text-align: left\">雛形プロジェクトの生成</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">bx dev build</td>\n<td style=\"text-align: left\">アプリのビルド</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">bx dev run</td>\n<td style=\"text-align: left\">Dockerコンテナでアプリ動作</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id=\"雛形プロジェクトの生成-bx-dev-create\" class=\"fragment\"></span><a href=\"#%E9%9B%9B%E5%BD%A2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%94%9F%E6%88%90-bx-dev-create\"><i class=\"fa fa-link\"></i></a>雛形プロジェクトの生成 (bx dev create)</h3>\n\n<p><code>bx dev create</code> でインタラクティブに選択することで，目的の雛形プロジェクトを生成できます。<br>\n以下に従って，同じようにプロジェクトを作成します。</p>\n\n<p>参考までに私が選択した項目(数字など)を示します。<br>\n<code>[bx dev create実行] &gt; 1 &gt; 1 &gt; 2 &gt; capsmaltapp &gt; capsmaltapp &gt; 3 &gt; n</code></p>\n\n<p>※バージョン差異等によって，項目や順番などが変わっているかもしれないので，実際にはきちんと表記を確認しながら進めた方が良いです</p>\n\n<p>コマンド実行例は以下です。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ bx dev create\n\n? Select a resource type:\n1. Backend Service / Web App\n2. Mobile Client\nEnter a number&gt; 1     // 1. を選択\n\n? Select a language:\n1. Java - MicroProfile / Java EE\n2. Java - Spring Framework\n3. Node\n4. Python\n5. Swift\nEnter a number&gt; 1     // Java EEを選択\n\n? Select a Starter Kit or select the last option for more information:\n1. Backend for Frontend: Java MicroProfile / Java EE Backend\n2. Microservice: Java MicroProfile / Java EE Microservice\n3. Web App: Java MicroProfile / Java EE Basic\n4. Show more details\nEnter a number&gt; 2     // マイクロサービスを選択\n\n\n? Enter a name for your project&gt; capsmaltapp     // アプリプロジェクト名を指定\n\n? Enter a hostname for your project&gt; capsmaltapp // ホスト名を指定(上記と同じでOK)\n? Select from the following DevOps Toolchain and target runtime environment options:\nNote: If you choose to create a DevOps Toolchain, then this machine must be\nconfigured for SSH access to your IBM Cloud Git Lab account at\nhttps://git.ng.bluemix.net/profile/keys in order to download the project code.\n1. IBM DevOps, using Cloud Foundry buildpacks\n2. IBM DevOps, using Kubernetes containers\n3. No DevOps, with manual deployment\nEnter a number&gt; 3     // 今回はIBM Cloud(パブリッククラウド)を使わないので，3.を選択\n\n? Do you want to add services to your project? [y/n]&gt; n   // IBM Cloudのサービスも使わないので，n を選択\n\nThe project, capsmaltapp, has been successfully saved into the current directory.\n</pre></div></div>\n\n<h3>\n<span id=\"ビルド-bx-dev-build\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89-bx-dev-build\"><i class=\"fa fa-link\"></i></a>ビルド (bx dev build)</h3>\n\n<p>生成された雛形プロジェクトのディレクトリに移動してから，ビルドコマンド <code>bx dev build</code> を実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd capsmaltapp  // 雛形プロジェクトのディレクトリに移動\n$ bx dev build   // --traceオプションで標準出力で確認しながらすすめるのもOK\n\nCreating image bx-dev-java-maven-tools based on Dockerfile-tools...\nImage will have user capsair added\nOK\nCreating a container named 'bx-dev-capsmaltapp-tools' from that image...\nOK\nStarting the 'bx-dev-capsmaltapp-tools' container...\nOK\nBuilding the project in the current directory started at Sun Dec 17 01:16:34 2017\nOK\nStopping the 'bx-dev-capsmaltapp-tools' container...\nOK\n</pre></div></div>\n\n<h3>\n<span id=\"ローカルコンテナで動作確認-bx-dev-run\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A7%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D-bx-dev-run\"><i class=\"fa fa-link\"></i></a>ローカルコンテナで動作確認 (bx dev run)</h3>\n\n<p><code>bx dev run</code> で，ローカル環境のDockerコンテナ上でアプリの動作確認をします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ bx dev run\n\nThe run-cmd option was not specified\nStopping the 'capsmaltapp' container...\nThe 'capsmaltapp' container was not found\nCreating image capsmaltapp based on Dockerfile...\nOK\nCreating a container named 'capsmaltapp' from that image...\nOK\nStarting the 'capsmaltapp' container...\nOK\nLogs for the capsmaltapp container:\n## PropertyMgr::initialize() A RuntimeBuilder helper class has changed the runtime directory name\n## PropertyMgr::initialize() originally specified parameter=defaultServer, new value used=/opt/ibm/wlp/usr/extension/liberty_dc/runtime/was90.wlp17.defaultCellName.opt.ibm.wlp.defaultServer\n## PropertyMgr::initialize() Calling  defineEnvMethodId.......\nTrying to load environment variables from - /opt/ibm/wlp/usr/extension/liberty_dc/runtime/was90.wlp17.defaultCellName.opt.ibm.wlp.defaultServer/dc.env.properties\n## PropertyMgr::initialize() loaded Environment Variables\nLIBRARY_NAME=am_ibm_16\nCalculated native library name as: am_ibm_16\nLaunching defaultServer (WebSphere Application Server 17.0.0.3/wlp-1.0.18.cl170320170927-1854) on IBM J9 VM, version 8.0.5.6 - pxa6480sr5fp6-20171124_02(SR5 FP6) (en_US)\n[AUDIT   ] CWWKE0001I: The server defaultServer has been launched.\n[AUDIT   ] CWWKE0100I: This product is licensed for development, and limited production use. The full license terms can be viewed here: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/license/base_ilan/ilan/17.0.0.3/lafiles/en.html\n[AUDIT   ] CWWKG0093A: Processing configuration drop-ins resource: /opt/ibm/wlp/usr/servers/defaultServer/configDropins/defaults/keystore.xml\n[AUDIT   ] CWWKZ0058I: Monitoring dropins for applications.\n[AUDIT   ] CWPKI0803A: SSL certificate created in 2.811 seconds. SSL key file: /opt/ibm/wlp/output/defaultServer/resources/security/key.jks\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/ibm/api/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/metrics/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/health/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/jwt/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/capsmaltapp/\n[AUDIT   ] CWWKZ0001I: Application capsmaltapp-1.0-SNAPSHOT started in 3.374 seconds.\n[AUDIT   ] CWWKF0012I: The server installed the following features: [microProfile-1.2, usr:apmDataCollector-7.4, mpFaultTolerance-1.0, servlet-3.1, ssl-1.0, jndi-1.0, mpHealth-1.0, appSecurity-2.0, jsonp-1.0, mpConfig-1.1, jaxrs-2.0, jaxrsClient-2.0, concurrent-1.0, jwt-1.0, mpMetrics-1.0, monitor-1.0, mpJwt-1.0, json-1.0, cdi-1.2, distributedMap-1.0].\n[AUDIT   ] CWWKF0011I: The server defaultServer is ready to run a smarter planet.\n</pre></div></div>\n\n<p>このコンテナプロセスは，<code>Ctrl + c</code> でkillできます。<br>\nまだkillせずに，少し動きを確認しましょう。</p>\n\n<p>ブラウザで以下を入力して開きます。(アプリ名が異なる場合は読み替えてください。今回はcapsmaltappで作成しています)<br>\n<code>http://localhost:9080/capsmaltapp</code> を開きます。</p>\n\n<p>以下のように表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/894d29fc1af30495351cb7f976ac03a9240cb3bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f64373736326461302d376333372d626539662d663731342d6330653664303638333232322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/894d29fc1af30495351cb7f976ac03a9240cb3bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f64373736326461302d376333372d626539662d663731342d6330653664303638333232322e706e67\" alt=\"Screen Shot 2017-12-17 at 2.07.26.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/d7762da0-7c37-be9f-f714-c0e6d0683222.png\"></a></p>\n\n<p>上手で表示された2つのURLもコピーしてアクセスしてみましょう。<br>\n\"health\" の方は，名前の通りヘルスチェックです。<br>\n\"example\" の方は，RESTのGETで呼べるURIです。</p>\n\n<p>Example.javaは，プロジェクト内のJavaコード(src &gt; main &gt; java &gt; application &gt; rest &gt; v1 &gt; Example.java)を見ると，JAX-RS(Java EE)に従って記載されたリソースクラスであることが分かります。<br>\nシンプルに，文字列を返すだけのGETが一つ用意されています。</p>\n\n<p>また，<a href=\"http://localhost:9080\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:9080</a> を開くと，WebSphere Liberty (Java EE アプリケーション・サーバー)のWelcomeページが開くことを確認できます。</p>\n\n<p>※WebSphere Libertyとは，マイクロサービス向けに作られた機能備えた超軽量なランタイムです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f98ab107407557ffcfe9073e8e0471eb9a70e705/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66643930383331382d356131302d353361342d656534632d6231346664663235303038642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f98ab107407557ffcfe9073e8e0471eb9a70e705/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66643930383331382d356131302d353361342d656534632d6231346664663235303038642e706e67\" alt=\"Screen Shot 2017-12-17 at 2.30.15.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/fd908318-5a10-53a4-ee4c-b14fdf25008d.png\"></a></p>\n\n<p>次の項でこれまでの流れを簡単に解説します。</p>\n\n<h3>\n<span id=\"bx-dev-createbuildrun-のまとめ-ここでは作業しません\" class=\"fragment\"></span><a href=\"#bx-dev-createbuildrun-%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81-%E3%81%93%E3%81%93%E3%81%A7%E3%81%AF%E4%BD%9C%E6%A5%AD%E3%81%97%E3%81%BE%E3%81%9B%E3%82%93\"><i class=\"fa fa-link\"></i></a>bx dev create/build/run のまとめ (ここでは作業しません)</h3>\n\n<p>さて，行った手順は，<strong>3つのコマンドを順に叩いただけ</strong>ですが，実際は何が行われたのでしょうか。</p>\n\n<p>実は，bx dev createで雛形を作った時点で，Dockerfileが含まれており，その中でWebSphere Libertyのコンテナイメージを取得し，プロジェクトをビルドして新たにDockerイメージを作成するように記載されていたわけです。</p>\n\n<p>細かくは説明しませんが，以下の1行目にpullしてくるイメージ名が指定されています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">Dockerfile</span></div>\n<div class=\"highlight\"><pre><span></span>FROM websphere-liberty:webProfile7\nMAINTAINER IBM Java engineering at IBM Cloud\nCOPY /target/liberty/wlp/usr/servers/defaultServer /config/\n# Install required features if not present, install APM Data Collector\nRUN installUtility install --acceptLicense defaultServer &amp;&amp; installUtility install --acceptLicense apmDataCollector-7.4\nRUN /opt/ibm/wlp/usr/extension/liberty_dc/bin/config_liberty_dc.sh -silent /opt/ibm/wlp/usr/extension/liberty_dc/bin/silent_config_liberty_dc.txt\n# Upgrade to production license if URL to JAR provided\nARG LICENSE_JAR_URL\nRUN \\ \n  if [ $LICENSE_JAR_URL ]; then \\\n    wget $LICENSE_JAR_URL -O /tmp/license.jar \\\n    &amp;&amp; java -jar /tmp/license.jar -acceptLicense /opt/ibm \\\n    &amp;&amp; rm /tmp/license.jar; \\\n  fi\n</pre></div>\n</div>\n\n<p>そして，ビルドを経て，bx dev runでは以下が行われました (抜粋)</p>\n\n<ul>\n<li>docker pullで，DockerHubからイメージ(websphere-liberty/webProfile7)を取得</li>\n<li>docker buildで，capsmaltappという名前でDockerイメージを生成する</li>\n<li>docker runで，capsmaltappのコンテナを稼働</li>\n</ul>\n\n<p>コンテナの中では，WebSphere LibertyというJava EEランタイムが動き，その上にアプリケーションをインストールし，REST APIとして動作していたことになります。</p>\n\n<p>つまり，<strong>Microservice Builderのコマンド (bx dev create/build/run)</strong> を使うことで，<br>\n<strong>新規にアプリを作って，ビルドして，ローカル環境のコンテナでの動作確認まではすぐにできていた</strong> わけです。</p>\n\n<p>(実際にアプリを作る場合は，RESTリソースを弄ったり，他APIを呼ぶように構成したり，色々な進め方があります)</p>\n\n<p>もう一度，プロジェクト内のファイル群を確認してみると，他にも色々含まれていますね。<br>\nこれらのファイル群は，手元での開発から，リポジトリへの更新，その後IBM Cloud Private(k8s環境)のコンテナに対する自動デプロイするための初期構成として用意されています。</p>\n\n<p>余裕があればご自身で中身を見てみてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd capsmaltapp/\n$ ls\nDockerfile      LICENSE         cli-config.yml      pom.xml\nDockerfile-tools    README.md       manifest.yml        src\nJenkinsfile     chart           manifests\n</pre></div></div>\n\n<p>だんだん触っていくにつれて，プロジェクトに最初からこういったものが含まれていて，アプリ名が埋め込まれた雛形が用意されることの便利さを感じられると思います。</p>\n\n<h1>\n<span id=\"後半戦-ibm-cloud-private上k8sに自動デプロイされるように構成する\" class=\"fragment\"></span><a href=\"#%E5%BE%8C%E5%8D%8A%E6%88%A6-ibm-cloud-private%E4%B8%8Ak8s%E3%81%AB%E8%87%AA%E5%8B%95%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%95%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%A7%8B%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>(後半戦) IBM Cloud Private上(k8s)に自動デプロイされるように構成する</h1>\n\n<p>仕組みの説明を最初にします。</p>\n\n<ul>\n<li>前半戦で作ったソースコード(アプリ)をリポジトリにpush</li>\n<li>GitHubリポジトリがコードの更新(e.g. git push)を検知してWebhookをJenkinsマスターに送る</li>\n<li>Jenkinsマスターは，Jenkinsスレーブに，一連のビルドからデプロイまでの操作を命令する</li>\n</ul>\n\n<p><strong>後半戦は以下の3つの作業を行います。</strong></p>\n\n<ul>\n<li>GitHubにリポジトリを作成して，Webhookの設定をする</li>\n<li>IBM Cloud Privateに必要なコンポーネントを導入する</li>\n<li>IBM Cloud Privateのコンソール画面を操作して，Jenkinsマスターを構成する</li>\n</ul>\n\n<h2>\n<span id=\"リポジトリ作成とwebhook設定\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90%E3%81%A8webhook%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>リポジトリ作成とWebhook設定</h2>\n\n<h3>\n<span id=\"リポジトリ作成と初期コードをpush\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90%E3%81%A8%E5%88%9D%E6%9C%9F%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92push\"><i class=\"fa fa-link\"></i></a>リポジトリ作成と初期コードをpush</h3>\n\n<p>まずは，GitHubの組織とリポジトリを作成します。</p>\n\n<p>ブラウザで，<a href=\"https://github.com/\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>にアクセスします。<br>\n※GitHubに組織を作成していなければ，一つ作ります。</p>\n\n<ul>\n<li>組織の作成\n\n<ul>\n<li>[GitHubトップページ] &gt; [+アイコン] &gt; [New organization]</li>\n<li><a href=\"https://camo.qiitausercontent.com/d317ca1cf0159da8b74bb726e221b418d64915cb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f34626131316664612d356330652d386465332d313164662d3535626237666238646462332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d317ca1cf0159da8b74bb726e221b418d64915cb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f34626131316664612d356330652d386465332d313164662d3535626237666238646462332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/4ba11fda-5c0e-8de3-11df-55bb7fb8ddb3.png\"></a></li>\n<li>組織名やメールアドレス，プラン(Free 無料)などを入力して，ウィザードをすすめる</li>\n<li>(私の場合は，組織名に msbtechorg を指定)</li>\n</ul>\n</li>\n<li>組織内に新規リポジトリを作成する\n\n<ul>\n<li>組織のページで，[Create New Repository]で <strong>前半戦で作成したプロジェクト名で</strong>，新規にリポジトリ作成 (私の場合，capsmaltapp)</li>\n<li>組織名/リポジトリ名 のようになる (下図)</li>\n<li><a href=\"https://camo.qiitausercontent.com/c534a23a7a6c2e1d44ba50b4a284b205ca3c5e1f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f38633032353135612d633566352d663239372d656664642d6461376535633438376561612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/c534a23a7a6c2e1d44ba50b4a284b205ca3c5e1f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f38633032353135612d633566352d663239372d656664642d6461376535633438376561612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/8c02515a-c5f5-f297-efdd-da7e5c487eaa.png\"></a></li>\n</ul>\n</li>\n</ul>\n\n<p>次に，前半戦で作成したプロジェクト内で，<code>git init</code> コマンドを実行して初期化します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ git init\n</pre></div></div>\n\n<p>その後，先程GitHubで作成したリポジトリにプロジェクトをpushしてください。<br>\n以下のように実行することになります。(リポジトリのURLは適宜読み替えてください)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ git add ./\n$ git commit -m \"Initial commit\"\n$ git remote add origin https://github.com/msbtechorg/capsmaltapp.git   // 自身のリポジトリを指定\n$ git push -u origin master\n</pre></div></div>\n\n<p>GitHubの対象リポジトリページにアクセスすると，プロジェクト内のコード群が登録されていることが確認できます。<br>\n<a href=\"https://camo.qiitausercontent.com/028f7955e4f1207135ce65c79e01f630e4b45352/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f30313537343633622d386437352d363863322d343030652d6663356536616339353864392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/028f7955e4f1207135ce65c79e01f630e4b45352/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f30313537343633622d386437352d363863322d343030652d6663356536616339353864392e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/0157463b-8d75-68c2-400e-fc5e6ac958d9.png\"></a></p>\n\n<h3>\n<span id=\"webhookの設定\" class=\"fragment\"></span><a href=\"#webhook%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Webhookの設定</h3>\n\n<p>ここでは，GitHubのリポジトリ内の更新(e.g. 開発者ソースコードを変更して，pushしたというイベント)をトリガーに，その事実(コードが更新されたこと)を通知する Webhook を設定します。</p>\n\n<ul>\n<li>\n<p>GitHubでPersonal Access Tokenを発行する</p>\n\n<ul>\n<li>[GitHubログイン] &gt; [Setting] &gt; [Developer settings] &gt; [Personal access tokens] &gt; [Generate new token]</li>\n<li>Personal Access Tokenでの認可スコープを設定 (下図参照)</li>\n<li><a href=\"https://camo.qiitausercontent.com/9a6cb6871391c249becf2cc2479b4a337dcade31/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f35643865363538352d633265322d653566662d636162392d3435363236393439343964642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9a6cb6871391c249becf2cc2479b4a337dcade31/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f35643865363538352d633265322d653566662d636162392d3435363236393439343964642e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/5d8e6585-c2e2-e5ff-cab9-4562694949dd.png\"></a></li>\n<li>下にスクロールして，[Generate token]をクリックしてトークンを生成</li>\n<li>表示されるトークンをメモ <strong>※一度しか表示されないので注意</strong>(忘れたら取り直し)</li>\n<li><a href=\"https://camo.qiitausercontent.com/e45c9f5eeb77ce000d29539ccc4e9c79d53e4547/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f37383139613237352d653736652d626437622d633665352d3839383336636531663034312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e45c9f5eeb77ce000d29539ccc4e9c79d53e4547/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f37383139613237352d653736652d626437622d633665352d3839383336636531663034312e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/7819a275-e76e-bd7b-c6e5-89836ce1f041.png\"></a></li>\n<li>(説明のためにSSを載せていますが，通常はセキュアに管理すべきものです。ちなみに今はRevoke済。)</li>\n</ul>\n</li>\n<li>\n<p>OAuthを設定します (GitHubのアカウントを使用して，後続の手順で作成するJenkinsにログインできるように，ID/Secretを生成します)</p>\n\n<ul>\n<li>[msbtechorg(組織)] &gt; [Settings] &gt; [Developer settings] &gt; [OAuth Apps]</li>\n<li><a href=\"https://camo.qiitausercontent.com/ac243505a331a6037a806c8b219013d79bb10661/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f35386562666632392d346436632d356663612d363235312d3235303765626362303930612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/ac243505a331a6037a806c8b219013d79bb10661/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f35386562666632392d346436632d356663612d363235312d3235303765626362303930612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/58ebff29-4d6c-5fca-6251-2507ebcb090a.png\"></a></li>\n<li><a href=\"https://camo.qiitausercontent.com/edb91d8db7c2676bcbcfd14876bcb766571818f0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66323832303836372d333539322d386431352d613134352d3063633938653333373733332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/edb91d8db7c2676bcbcfd14876bcb766571818f0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66323832303836372d333539322d386431352d613134352d3063633938653333373733332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/f2820867-3592-8d15-a145-0cc98e337733.png\"></a></li>\n<li>[New OAuth App] をクリック</li>\n<li>次の3項目に対して，値を入力</li>\n<li>Application name / Homepage URL / Authorization callback URL</li>\n<li>(10.132.75.83と記載している部分は，自身の環境のものに読み替えてください)</li>\n<li><a href=\"https://camo.qiitausercontent.com/eea80f19071d7d23a21ccf2340189a3ae10fac81/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33656565623534652d353835322d313866332d623037372d3333393338376134613462332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/eea80f19071d7d23a21ccf2340189a3ae10fac81/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33656565623534652d353835322d313866332d623037372d3333393338376134613462332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/3eeeb54e-5852-18f3-b077-339387a4a4b3.png\"></a></li>\n</ul>\n</li>\n</ul>\n\n<p>上記で入力した3項目の解説</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">項目</th>\n<th style=\"text-align: left\">入力値</th>\n<th style=\"text-align: left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">Application name</td>\n<td style=\"text-align: left\">MSB_OAuth(なんでもOK)</td>\n<td style=\"text-align: left\">OAuthのID/Secretの組み合わせを識別するための名前</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Homepage URL</td>\n<td style=\"text-align: left\"><a href=\"http://xxx.xxx.xxx.xxx:31000\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://xxx.xxx.xxx.xxx:31000</a></td>\n<td style=\"text-align: left\">IBM Cloud Private上のJenkinsマスターのURL (ICPシングルノード構成の場合，ホストIPでOK)</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Authorization callback URL</td>\n<td style=\"text-align: left\"><a href=\"http://xxx.xxx.xxx.xxx:31000/securityRealm/finishLogin\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://xxx.xxx.xxx.xxx:31000/securityRealm/finishLogin</a></td>\n<td style=\"text-align: left\">Jenkinsマスターに接続したときに，GitHubアカウントを使った認証・認可を呼び出すためのURL</td>\n</tr>\n</tbody>\n</table>\n\n<ul>\n<li>入力が終われば，[Register application]をクリックして進む</li>\n<li>次のページが表示されるので，<strong>Client ID</strong> / <strong>Client Secret</strong> をメモ (※ID/Secretは，いつでも確認できます。)</li>\n<li><a href=\"https://camo.qiitausercontent.com/a67145fe43e851d4df69958125a3fff17549eded/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61383439356238392d613134322d666439662d323532332d3032623562363465356163332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a67145fe43e851d4df69958125a3fff17549eded/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61383439356238392d613134322d666439662d323532332d3032623562363465356163332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/a8495b89-a142-fd9f-2523-02b5b64e5ac3.png\"></a></li>\n</ul>\n\n<p><strong>ここまでで，以下をメモしているはずです。</strong><br>\n<strong>あとでJenkinsマスターを構成する手順で使用します。</strong></p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">項目</th>\n<th style=\"text-align: left\">値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">Personal Access Token</td>\n<td style=\"text-align: left\">c4b371b33290940e5167f67ad5effa4f1f033118</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Client ID</td>\n<td style=\"text-align: left\">45c465713684b148fdb5</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Client Secret</td>\n<td style=\"text-align: left\">c74034c9aeb791984a67104ff915be1a9018cf52</td>\n</tr>\n</tbody>\n</table>\n\n<ul>\n<li>\n<p>Webhookの設定</p>\n\n<ul>\n<li>[msbtechorg(組織)] &gt; [Settings] &gt; [Webhooks] &gt; [Add webhook]</li>\n<li>Payload URLを設定</li>\n<li>(私の場合は，<code>Payload URL = http://10.132.75.83:31000/github-webhook/</code>)</li>\n<li><a href=\"https://camo.qiitausercontent.com/2acbe39eea41af513de217b965672496ad0edf0a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f31353731366361362d346462622d643766662d363733392d6166323436656535353732372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2acbe39eea41af513de217b965672496ad0edf0a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f31353731366361362d346462622d643766662d363733392d6166323436656535353732372e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/15716ca6-4dbb-d7ff-6739-af246ee55727.png\"></a></li>\n<li>\n<strong>\"Let me select individual events\"</strong> のラジオボタンを選択し，次の項目にチェックを入れます。</li>\n<li>Pull request / Push / Repository</li>\n<li><a href=\"https://camo.qiitausercontent.com/6553359eb2b9203093789d96a154ad61bd7aa072/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66623031343634392d663361372d643361372d313331352d3336376664306338363131312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6553359eb2b9203093789d96a154ad61bd7aa072/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f66623031343634392d663361372d643361372d313331352d3336376664306338363131312e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/fb014649-f3a7-d3a7-1315-367fd0c86111.png\"></a></li>\n<li>[Add webhook] をクリックして登録</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"jenkinsマスターの構成-ibm-cloud-private上でやること\" class=\"fragment\"></span><a href=\"#jenkins%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%81%AE%E6%A7%8B%E6%88%90-ibm-cloud-private%E4%B8%8A%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Jenkinsマスターの構成 (IBM Cloud Private上でやること)</h2>\n\n<p>いよいよ，最後の手順です。<br>\nIBM Cloud Private上のコンテナでJenkinsマスターを稼働させます。</p>\n\n<p>Jenkinsマスターは，前の手順で用意したWebhookを受け取り，Jenkinsスレーブの各コンテナでビルド・イメージ作成・テスト・デプロイをキックします。</p>\n\n<p>これを一言で表すと，\"Jenkins Pipelineを動作させる\" <br>\nと言えるかと思います。</p>\n\n<p>では，以下の作業を実施します。</p>\n\n<ul>\n<li>Microservice Builder Fabricの導入</li>\n<li>Microservice Builder Pipelineの導入・構成</li>\n</ul>\n\n<h3>\n<span id=\"microservice-builder-fabricの導入\" class=\"fragment\"></span><a href=\"#microservice-builder-fabric%E3%81%AE%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>Microservice Builder Fabricの導入</h3>\n\n<p>IBM Cloud Privateコンソールから操作します。<br>\n(私の場合は，<code>https://10.132.75.83:8443</code> がコンソールUI) </p>\n\n<ul>\n<li>[IBM Cloud Privateコンソールにログイン] &gt; [メニューからCatalog]</li>\n<li><p>[ibm-microservicebuilder-fabric] を選択</p></li>\n<li><p><a href=\"https://camo.qiitausercontent.com/1bce431cdee771c8a2fa798a7e3824370808bce2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33326364633331372d663031342d356131382d336539372d3736383030663638653932622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/1bce431cdee771c8a2fa798a7e3824370808bce2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33326364633331372d663031342d356131382d336539372d3736383030663638653932622e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/32cdc317-f014-5a18-3e97-76800f68e92b.png\"></a></p></li>\n<li><p>右下にある [Configure] をクリック</p></li>\n<li><p>[Release name]に任意の名前を入力 (小文字英数字)</p></li>\n<li><p>[I have read and agreed to the license agreements]にチェックを入れる</p></li>\n<li><p><a href=\"https://camo.qiitausercontent.com/4a2baae3e907064ceff65124ff67be204dca3ec4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f37303635646262632d386430312d353165312d343435612d6634383733303563353465662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4a2baae3e907064ceff65124ff67be204dca3ec4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f37303635646262632d386430312d353165312d343435612d6634383733303563353465662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/7065dbbc-8d01-51e1-445a-f487305c54ef.png\"></a></p></li>\n<li><p>末尾右下にある [Install] をクリック</p></li>\n</ul>\n\n<p>以上の手順で，IBM Cloud PrivateにMicroservice Builder fabricをコンテナとしてリリースできました。<br>\n簡単に中身を説明します。</p>\n\n<p>Microservice Builder fabricは，Zipkinによる分散トレースを行う際に使用します。実はそれだけではなく，Microservice Builderで使用するキーストアをsecretとして登録してくれます。<br>\nこのsecretが欲しかったので，最初にfabricの導入を行いました。</p>\n\n<p>secretは以下kubectlコマンドで確認できます。</p>\n\n<p>ローカルPCに <a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-1-kubectl-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" id=\"reference-fe298b95216540b65f8b\">こちらの手順</a> でkubectlコマンドをインストール済であれば，以下を実行することでsecretを確認できます。</p>\n\n<p><code>$ kubectl get secrets</code></p>\n\n<p>もし，IBM Cloud Privateのk8sクラスターに接続していない場合は，<a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-2-ibm-cloud-private%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C\" id=\"reference-fe298b95216540b65f8b\">こちら</a> を実施してから，コマンド実行します。</p>\n\n<p>&lt;実行結果&gt;</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ kubectl get secrets\n\nNAME                     TYPE                                  DATA      AGE\ncalico-etcd-secrets      Opaque                                3         7d\ndefault-token-2fcm6      kubernetes.io/service-account-token   3         7d\nmb-keystore              Opaque                                1         1m\nmb-keystore-password     Opaque                                1         1m\nmb-truststore            Opaque                                1         1m\nmb-truststore-password   Opaque                                1         1m\n</pre></div></div>\n\n<h3>\n<span id=\"microservice-builder-pipelineの導入構成\" class=\"fragment\"></span><a href=\"#microservice-builder-pipeline%E3%81%AE%E5%B0%8E%E5%85%A5%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>Microservice Builder Pipelineの導入・構成</h3>\n\n<p>いよいよ終盤です。2つの操作をします。</p>\n\n<p>1) IBM Cloud PrivateのノードにSSHでログインして，事前設定<br>\n2) IBM Cloud Privateのコンソールから，Microservice Builder Pipelineをコンテナにリリースします</p>\n\n<h4>\n<span id=\"1-ibm-cloud-privateのノードにsshでログインして事前設定\" class=\"fragment\"></span><a href=\"#1-ibm-cloud-private%E3%81%AE%E3%83%8E%E3%83%BC%E3%83%89%E3%81%ABssh%E3%81%A7%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97%E3%81%A6%E4%BA%8B%E5%89%8D%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>1) IBM Cloud PrivateのノードにSSHでログインして，事前設定</h4>\n\n<p>1)の操作はすべてIBM Cloud Privateのノード内で行います。<br>\nSSHでIBM Cloud Privateのノードにログインします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ ssh capsmalt@10.132.75.83\n$ sudo -i\n# // rootに昇格。今回はk8s環境内の操作はrootで操作していますが，外部公開する場合は適切なユーザー設定をしてください。\n</pre></div></div>\n\n<p>1-1) jqのインストール<br>\nJSONの制御をしやすくするツールです。<br>\nすぐ後のステップの中で使用しますのでインストールします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span># apt install -y jq\n</pre></div></div>\n\n<p>1-2) admin.registrykeyの作成<br>\nJenkins PipelineがICP内のDocker registryに接続するためのSecretを作成します。</p>\n\n<p>ローカルPCにはKubectlは導入済みかと思いますが，<br>\nIBM Cloud Privateのノード上に未導入の場合は，<a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-1-kubectl-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">Kubectl導入手順</a>を参考に，Linux用のKubectlを導入しておきましょう。今回に限らず，使いたいケースは出てくると思います。</p>\n\n<p>また，IBM Cloud Privateのk8sクラスターに接続するために，<a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-2-ibm-cloud-private%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C\">Kubectlの接続先の設定</a>をしておきましょう。</p>\n\n<p>Kubectlの準備ができたら，以下のコマンドを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"test\"><div class=\"highlight\"><pre><span></span># kubectl create secret docker-registry admin.registrykey --docker-server=https://mycluster.icp:8500 --docker-username=admin --docker-password=admin --docker-email=null\n</pre></div></div>\n\n<p>上記コマンドのオプションは，ICPインストールをデフォルト値で行った場合の例です。<br>\nもし，パスワードを <code>p@ssw0rD</code> のように変更している場合は，<br>\n<code>--docker=password=p@ssw0rD</code> のように適宜変更してください。</p>\n\n<p>1-3) service accountにsecret設定を反映<br>\n前の手順で作成したadmin.registrykeyを使用するようにservice accountに反映させます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span># kubectl get serviceaccounts default -o json | jq 'del(.metadata.resourceVersion)' | jq 'setpath([\"imagePullSecrets\"];[{\"name\":\"admin.registrykey\"}])' | kubectl replace serviceaccount default -f -\n\nserviceaccount \"default\" replaced\n</pre></div></div>\n\n<h4>\n<span id=\"2-ibm-cloud-privateのコンソールからmicroservice-builder-pipelineをコンテナにリリース\" class=\"fragment\"></span><a href=\"#2-ibm-cloud-private%E3%81%AE%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%89microservice-builder-pipeline%E3%82%92%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>2) IBM Cloud Privateのコンソールから，Microservice Builder Pipelineをコンテナにリリース</h4>\n\n<p>2)の作業は，IBM Cloud Privateコンソールから行います。</p>\n\n<ul>\n<li>ブラウザでコンソールにログイン (e.g. <code>https://10.132.75.83:8443</code>)</li>\n<li>[メニュー] &gt; [Catalog] &gt; [ibm-microservicebuilder-pipeline] をクリック\n\n<ul>\n<li><a href=\"https://camo.qiitausercontent.com/344e512f755abf064c09581c1c2653d3454b121c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f36343336306361302d356666622d313632352d356435342d3032366264323733636430302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/344e512f755abf064c09581c1c2653d3454b121c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f36343336306361302d356666622d313632352d356435342d3032366264323733636430302e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/64360ca0-5ffb-1625-5d54-026bd273cd00.png\"></a></li>\n</ul>\n</li>\n<li>[Configure] をクリックして，以下の項目を設定</li>\n</ul>\n\n<p>(ご自身のGitHubアカウントで用意したものに置き換えてください)</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">入力項目</th>\n<th style=\"text-align: left\">値</th>\n<th style=\"text-align: left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">Release name</td>\n<td style=\"text-align: left\">capsmalt-pipeline</td>\n<td style=\"text-align: left\">(入力チェックをパスできれば何でもOK)</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">[ ] I have read ...</td>\n<td style=\"text-align: left\">チェック入れる</td>\n<td style=\"text-align: left\">ライセンス確認チェックボックス</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Orgs</td>\n<td style=\"text-align: left\">msbtechorg</td>\n<td style=\"text-align: left\">GitHubで作成した組織名</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">RepoPattern</td>\n<td style=\"text-align: left\">.*</td>\n<td style=\"text-align: left\">.*の設定で組織内のすべてのリポジトリがPipeline対象になる</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">OAuth.Token</td>\n<td style=\"text-align: left\">c4b371b33290940e5167f67ad5effa4f1f033118</td>\n<td style=\"text-align: left\">GitHubで設定したPersonal Access Token</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">OAuth.User</td>\n<td style=\"text-align: left\">capsmalt</td>\n<td style=\"text-align: left\">GitHubアカウントのユーザー名</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">App.Id</td>\n<td style=\"text-align: left\">45c465713684b148fdb5</td>\n<td style=\"text-align: left\">GitHubで設定したOAuthAppのClient ID</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">App.Secret</td>\n<td style=\"text-align: left\">c74034c9aeb791984a67104ff915be1a9018cf52</td>\n<td style=\"text-align: left\">GitHubで設定したOAuthAppのClient Secret</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Admins</td>\n<td style=\"text-align: left\">capsmalt</td>\n<td style=\"text-align: left\">GitHubアカウントの管理者権限のあるユーザー名</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">その他の項目</td>\n<td style=\"text-align: left\">デフォルト値(or ブランク)</td>\n<td style=\"text-align: left\">-</td>\n</tr>\n</tbody>\n</table>\n\n<p>入力後のイメージ図<br>\n<a href=\"https://camo.qiitausercontent.com/b7535a6ae5d517af67dc42354a96b6f378c6d2d3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f31303131346137382d643266322d376431362d623737312d3534303063666433396230352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7535a6ae5d517af67dc42354a96b6f378c6d2d3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f31303131346137382d643266322d376431362d623737312d3534303063666433396230352e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/10114a78-d2f2-7d16-b771-5400cfd39b05.png\"></a></p>\n\n<ul>\n<li>最後に，入力画面の右下にある [Install] をクリックし，インストールを完了する</li>\n<li>[ICPコンソールメニュー] &gt; [Workloads] &gt; [Helm releases] でリリースしたもの(capsmalt-pipeline，capsmalt-fabric)を確認できます。</li>\n</ul>\n\n<h2>\n<span id=\"jenkins-pipelineによる自動デプロイの動作確認\" class=\"fragment\"></span><a href=\"#jenkins-pipeline%E3%81%AB%E3%82%88%E3%82%8B%E8%87%AA%E5%8B%95%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>Jenkins Pipelineによる自動デプロイの動作確認</h2>\n\n<p>IBM Cloud Privateのコンテナ上で動作するJenkinsマスターに接続します。<br>\nブラウザで，<code>http://10.132.75.83:31000/</code> を開きます。</p>\n\n<p>OAuthの認可確認画面がでてくるので，GitHubアカウントのパスワードなどを入力し，Jenkinsのコンソールにログインします。 <br>\n<a href=\"https://camo.qiitausercontent.com/7b1d114bba17b8da4874c0afd83da0943f7cdd6e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f62653437363631622d633165642d323838642d343135372d3034333664363463376234312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7b1d114bba17b8da4874c0afd83da0943f7cdd6e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f62653437363631622d633165642d323838642d343135372d3034333664363463376234312e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/be47661b-c1ed-288d-4157-0436d64c7b41.png\"></a></p>\n\n<p>自身の組織を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/87fde48f4dd1cadb618446a580320c2dba775d9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f38323262343832322d333761372d383164382d646630392d6337356437653263313865662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/87fde48f4dd1cadb618446a580320c2dba775d9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f38323262343832322d333761372d383164382d646630392d6337356437653263313865662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/822b4822-37a7-81d8-df09-c75d7e2c18ef.png\"></a></p>\n\n<p>組織内に含まれるリポジトリを選択します。(今回は，capsmaltapp)<br>\n<a href=\"https://camo.qiitausercontent.com/b49c3125fe30edfe5b50f51320d687afb79d18c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f62363538363930662d306664362d353232652d383831662d3735303563653330626538612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b49c3125fe30edfe5b50f51320d687afb79d18c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f62363538363930662d306664362d353232652d383831662d3735303563653330626538612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/b658690f-0fd6-522e-881f-7505ce30be8a.png\"></a></p>\n\n<p>ブランチを選択します。(今回は，masterブランチのみ)<br>\n<a href=\"https://camo.qiitausercontent.com/58cf21d995715c174d77bad6ece8ebef24dbf5ee/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33356137346633302d663531662d376435662d333538392d6137336638323266623533382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/58cf21d995715c174d77bad6ece8ebef24dbf5ee/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33356137346633302d663531662d376435662d333538392d6137336638323266623533382e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/35a74f30-f51f-7d5f-3589-a73f822fb538.png\"></a></p>\n\n<p>Jenkinsマスターの構成や，GitHubのWebhook構成がちゃんとできていれば，以下図のようなパイプライン画面が確認できます。<br>\nソースコードの更新をトリガーに，自動的にビルドやテスト，デプロイが行われるパイプラインです。<br>\n<a href=\"https://camo.qiitausercontent.com/bfd3509d220372cb31b83d366c2f6137382e0e31/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61346564366361382d633530662d636336392d306232632d3132323237333962663634382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bfd3509d220372cb31b83d366c2f6137382e0e31/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61346564366361382d633530662d636336392d306232632d3132323237333962663634382e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/a4ed6ca8-c50f-cc69-0b2c-1222739bf648.png\"></a></p>\n\n<p>ローカルPCで，ソースコードを少し変更してみましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/be063b9c556a47fe80bea05cc23c52150fa5793e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61303838653731382d653638342d653264372d383462312d6462323336336331306632322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be063b9c556a47fe80bea05cc23c52150fa5793e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f61303838653731382d653638342d653264372d383462312d6462323336336331306632322e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/a088e718-e684-e2d7-84b1-db2363c10f22.png\"></a></p>\n\n<p>なんの面白みもないですが，文字列を変えてみました。<br>\n<a href=\"https://camo.qiitausercontent.com/f2ba36910249380c74cfcee78b27c2ab8b08255d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f39373135363162352d313532322d633333352d333462372d6334313937623362366461632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f2ba36910249380c74cfcee78b27c2ab8b08255d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f39373135363162352d313532322d633333352d333462372d6334313937623362366461632e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/971561b5-1522-c335-34b7-c4197b3b6dac.png\"></a></p>\n\n<p>GitHubにpushします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ git add ./\n$ git commit -m \"Change msg.\"\n$ git push\n</pre></div></div>\n\n<p>ブラウザで，確認します。<br>\n1行だったものが2行に増えていませんか？<br>\nリポジトリの更新(Webhook)をJenkinsマスターが受け取って，ICP上でパイプラインを動作させていることが分かります。<br>\n<a href=\"https://camo.qiitausercontent.com/960cff8c2d3ae10654a08f602a872686cb7613c3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33613833323839622d643364612d353566662d383461322d3465386661643761643465622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/960cff8c2d3ae10654a08f602a872686cb7613c3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33613833323839622d643364612d353566662d383461322d3465386661643761643465622e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/3a83289b-d3da-55ff-84a2-4e8fad7ad4eb.png\"></a></p>\n\n<p>アプリの動作を確認してみます。</p>\n\n<p>ブラウザで，ICPコンソールにアクセスします。(<code>https://10.132.75.83:8443</code>)<br>\nHelm release一覧から，対象アプリを選択<br>\n[ICPのメニュー] &gt; [Helm releases] &gt; [capsmaltapp]<br>\n<a href=\"https://camo.qiitausercontent.com/218e89644025a3ab19b2ede0b2409ab281e22b68/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f36383630316235632d653862352d316539352d373631302d3733313835346536313536612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/218e89644025a3ab19b2ede0b2409ab281e22b68/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f36383630316235632d653862352d316539352d373631302d3733313835346536313536612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/68601b5c-e8b5-1e95-7610-731854e6156a.png\"></a></p>\n\n<p>SERVICE欄にある [capsmaltapp-service] を選択<br>\n<a href=\"https://camo.qiitausercontent.com/8fc5092da87f1efa6ad57f5e6367b11ad96979ec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33623033633766632d373633342d643738372d313166662d3166333736663964666339662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8fc5092da87f1efa6ad57f5e6367b11ad96979ec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33623033633766632d373633342d643738372d313166662d3166333736663964666339662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/3b03c7fc-7634-d787-11ff-1f376f9dfc9f.png\"></a></p>\n\n<p>NodePort欄の <code>http 31110/TCP</code> をクリック (ポート番号は異なります)<br>\n<a href=\"https://camo.qiitausercontent.com/1d1f0d465f0f9195edb9a5a24f5ad266dc4ab28a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33623033653361312d396437302d636635382d356565302d6639333336333233653735342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/1d1f0d465f0f9195edb9a5a24f5ad266dc4ab28a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f33623033653361312d396437302d636635382d356565302d6639333336333233653735342e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/3b03e3a1-9d70-cf58-5ee0-f9336323e754.png\"></a></p>\n\n<p>コンテナ上のWebSphere Libertyが動作していることが分かります。<br>\n<a href=\"https://camo.qiitausercontent.com/5285507a9f15c12c99f2148e1787e446f12b1ac4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f63656562396565382d643336332d636562652d343131322d3765383539323361616366372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5285507a9f15c12c99f2148e1787e446f12b1ac4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f63656562396565382d643336332d636562652d343131322d3765383539323361616366372e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/ceeb9ee8-d363-cebe-4112-7e85923aacf7.png\"></a></p>\n\n<p>URLで，REST(GET)のリソースパスを指定しましょう。<br>\n(私の場合，<code>http://10.132.75.83:31110/capsmaltapp/v1/example</code>)<br>\n<a href=\"https://camo.qiitausercontent.com/07f20f8c139a561386239a7c7307054d2e21143b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f63336336303563382d343031312d653339632d623435302d3561323832343831346164632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/07f20f8c139a561386239a7c7307054d2e21143b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393434372f63336336303563382d343031312d653339632d623435302d3561323832343831346164632e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/69447/c3c605c8-4011-e39c-b450-5a2824814adc.png\"></a></p>\n\n<p>さきほどローカルPCで変更して，GitHubにpushしたコードが反映されていることが分かります。</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<h2>\n<span id=\"本稿で行った初期設定\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%A7%E8%A1%8C%E3%81%A3%E3%81%9F%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>本稿で行った初期設定</h2>\n\n<p>IBM Cloud Privateのノード，ICPコンソール，開発端末，GitHub，などいろんな場所で作業をしたので，結構大変だなーと感じた方もいらっしゃるかと思います。</p>\n\n<p>しかし，ざっくり整理すると，実際は下記程度の作業しかしてません。</p>\n\n<ul>\n<li>Microservice Builderコマンド(bx dev create/build/run)\n\n<ul>\n<li>雛形作成，ビルド，ローカルPCでコンテナ稼働確認</li>\n</ul>\n</li>\n<li>GitHubのWebhook構成</li>\n<li>Microservice Builder Pipeline(Jenkinsマスター)\n\n<ul>\n<li>GitHubへのアクセス情報を入力して，Jenkinsマスターを構成 </li>\n</ul>\n</li>\n</ul>\n\n<p>とは言え，この構成を自らオープンソースで組み上げて構成しようとすると，実はいろんな箇所で骨の折れる作業が発生します。</p>\n\n<h2>\n<span id=\"今後つかっていく際にやること\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E9%9A%9B%E3%81%AB%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今後つかっていく際にやること</h2>\n\n<p>次回以降はめちゃめちゃ楽です。コード書いてpush。これだけです。</p>\n\n<ul>\n<li>\n<p>アプリ改修の場合 (あとは自動デプロイ)</p>\n\n<ul>\n<li>コーディング</li>\n<li>GitHubにpush</li>\n</ul>\n</li>\n<li>\n<p>新規にアプリを追加する場合 (新規にリポジトリを用意するだけでOK。特に設定不要)</p>\n\n<ul>\n<li>コーディング</li>\n<li>GitHubの既存組織に新規アプリ名でリポジトリを作成する</li>\n<li>GitHubにpush</li>\n</ul>\n</li>\n</ul>\n\n<p>Microservice Builderで作ったアプリは，生成された瞬間からCI/CDの枠組みに組み込まれています。</p>\n\n<p>つまり，一度Microservice Builder Pipelineの構成を行うことで，継続的にアプリ更新を行って，IBM Cloud Privateにデプロイされる構成になります。</p>\n\n<p>組織内で標準化に苦労している場合や，毎度CI/CDを含めた構成をプロジェクトごとに用意している方は，ありがたみを実感できると思います。</p>\n\n<p>当然ながら，自由にカスタマイズすることも可能です。<br>\n例えば，</p>\n\n<ul>\n<li>パイプラインの各ステージ内で，既存のテストツールやロジックを流す</li>\n<li>ビルドとデプロイを分離する</li>\n<li>(従来の環境区分けをしたい場合) Prod/Test/Devのように対象を分けてデプロイする</li>\n<li>その他諸々</li>\n</ul>\n\n<h1>\n<span id=\"まとめ-1\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81-1\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>Kubernetes環境(IBM Cloud Private)を題材として，Microservice Builderというツールで，新規アプリ開発〜デプロイ自動化までを試してみました。</p>\n\n<p>Microservice Builderは，Kubernetesをベースにマイクロサービスの開発・運用を助けてくれます。ただ，まだ一部しか利用できていないので，また実践編を書きたいと思います。</p>\n\n<p>参考: <br>\nOfficialマニュアル: <a href=\"https://www.ibm.com/support/knowledgecenter/en/SS5PWC/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Microservice Builder</a></p>\n\n<p>IBM Cloud Private 導入手順 ==&gt; <a href=\"https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae\">IBM Cloud Private: Kubernetesをオンプレミス(IaaS)に導入してみる</a><br>\nCLI導入など ==&gt; <a href=\"https://qiita.com/capsmalt/items/9f282ce26c58873e22b6\" id=\"reference-fe298b95216540b65f8b\">IBM Cloud Private k8sクラスターをCLIで操作してみる</a></p>\n",
  "body": "みなさんはKubernetesはどうやって使っていますか？\n\n仕事とは関係なく趣味レベルですが，\n私のチームでは以前からGKEやIBM Cloudをメインとしてパブリック環境のKubernetesを使っていました。(OpenShift Onlineもほんの少し)\n\nk8sの選択肢は，クラウドのホスティングサービス，ターンキーでIaaSに入れるパターン，ソフトとして自身で導入・構築するパターン，色々あると思います。さらに，開発での利用，また運用，チームによって使い方も違いますよね。\n\n俺達はこうやってるぜ！みたいな情報を積極的に出せる場があると良いですね。きっと需要もあるし，互いに共有する価値もあると思っています。ぜひぜひ教えてくださいませ。\n\n# はじめに\n本日は，[Kubernetes2 Advent Calendar 2017](https://qiita.com/advent-calendar/2017/kubernetes2) 17日目になります。\n\n今回は，プライベート環境で開発用途なら無償で利用できる\n **IBM Cloud Private CE (Community Edition)** を使ってみたいと思います。\n\nIBM Cloud Private CE のインストールがまだの場合でも誰でも導入できるので，[こちら](https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae) を参考にしてください。\n\nこの記事では **\"アプリを作って，IBM Cloud Privateにデプロイ\"** という基本的な部分を実施したいと思います。\n\nこの後説明する，Microservice Builderというツールを使ってアプリを開発します。\n\n参考: [\"Microservice Builder\"](https://developer.ibm.com/microservice-builder/)\n\n# Microservice Builder とは\n様々なオープンテクノロジーを活用し，マイクロサービスアプリをスピード開発・デプロイするためのツールです。\n\n一度アプリを作った後は，ソースコードをリポジトリにpushするだけで自動的にビルド・テストが行われ，IBM Cloud Privateにデプロイされるようになります。\n\nぱっとイメージが湧く方向けに結論を先に伝えると，\n\"Webhook + Jenkins Pipeline\" を使って，Docker Imageをprivate registryに登録してバージョン管理し，諸々のステージを経て，Kubernetes環境にhelm releaseするイメージです。\n\nそのために，アプリを作った瞬間からCI/CDの初期構成が組まれます。\n※CI: Continuous Integration (継続的インテグレーション)\n※CD: Continuous Delivery (継続的デリバリー)\n\n|雛形プロジェクトの初期構成 (抜粋)|用途|\n|:---|:----|\n|Example.java|JAX-RSのリソースクラス1つ|\n|pom.xml|Mavenビルド|\n|jenkinsfile|Jenkins Pipeline|\n|Dockerfile|Dockerイメージビルド|\n|kube.deploy.yml|Kubernetesへのデプロイ|\n|chartディレクトリ|helm chart|\n|その他|-|\n\n# 環境 と 進め方\n以下の2段構成で紹介します。\n\n- (前半戦) Microservice Builderでアプリを作ってローカル環境でコンテナ稼働させる\n- (後半戦) IBM Cloud Private上(k8s)に自動デプロイされるように構成する\n\n環境については，開発環境はMac，デプロイ先はUbuntu上に構築したIBM Cloud Privateとします。\n\n## 開発環境\nmacOS 10.13.1\nDocker for Mac V17.09.1\niTerm V3.0.15\n\n (なんとなく今日はMacbook Air 11使ってます)\n\n## デプロイ先となる環境\nIBM Cloud Private CE (Community Edition) V2.1.0\n(※以降，IBM Cloud privateをICPと表現する場合があります)\n\n注意:\nICP未インストールの場合は先にインストールしてください。\n時間課金のAWSやIBM CloudなどのIaaSを使うのもありだと思います。\n\n参考: [\"IBM Cloud Private: Kubernetesをオンプレミス(IaaS)に導入してみる\"](https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae)\n\n# (前半戦) Microservice Builderでアプリを作ってローカル環境でコンテナ稼働させる\n## コマンドの事前準備\n###  bxコマンド (IBM Cloud CLI) を導入する\n\n[IBM Cloud CLI Installer](https://console.bluemix.net/docs/cli/reference/bluemix_cli/all_versions.html#ibm-cloud-cli-installer-all-versions) からお使いのPCにあったものをインストールすればOKです。\nインストール後にバージョン確認した結果は以下です。\n\n```text\n$ bx --version\n\nbx version 0.6.2+040af8db-2017-11-17T08:37:05+00:00\n```\n\n[こちら](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#2-1-ibm-cloud-cli-のインストール) に画面イメージ付きで導入手順がありますので，必要に応じて参照ください。\n\n\n\n### bx devプラグインを導入する\nbxコマンドでdevプラグインを導入します。\n\n```text\n$ bx plugin install dev\n```\n\nヘルプを確認します。\n\n```text\n$ bx plugin show dev   // bx dev helpでも確認できます\n\nPlugin                         dev\nVersion                        1.1.0\nMinimal CLI version required   0.4.2\n\nCommands:\ndev build             Build the project in a local container\ndev code              Download the code from a project\ndev console           Opens the IBM Cloud console for a project\ndev create            Creates a new project and gives you the option to add services\ndev debug             Debug your application in a local container\ndev delete            Deletes a project from your space\ndev deploy            Deploy an application to IBM Cloud\ndev enable            Add IBM Cloud files to an existing project.\ndev get-credentials   Gets credentials required by the project to enable use of bound services.\ndev list              List all IBM Cloud projects in a space\ndev run               Run your application in a local container\ndev shell             Open a shell into a local container\ndev status            Check the status of the containers used by the CLI\ndev stop              Stop a container\ndev test              Test your application in a local container\ndev view              View the URL of your project\ndev help              Show help\n```\n\n## 新規アプリを作る (bx dev create/build/run)\nさきほど導入した，bxコマンドおよびdevプラグインで，以下の操作が行えます。\n\n|コマンド|用途|\n|:--|:--|\n|bx dev create|雛形プロジェクトの生成|\n|bx dev build|アプリのビルド|\n|bx dev run|Dockerコンテナでアプリ動作|\n\n### 雛形プロジェクトの生成 (bx dev create)\n`bx dev create` でインタラクティブに選択することで，目的の雛形プロジェクトを生成できます。\n以下に従って，同じようにプロジェクトを作成します。\n\n参考までに私が選択した項目(数字など)を示します。\n`[bx dev create実行] > 1 > 1 > 2 > capsmaltapp > capsmaltapp > 3 > n`\n\n※バージョン差異等によって，項目や順番などが変わっているかもしれないので，実際にはきちんと表記を確認しながら進めた方が良いです\n\nコマンド実行例は以下です。\n\n```text\n$ bx dev create\n\n? Select a resource type:\n1. Backend Service / Web App\n2. Mobile Client\nEnter a number> 1     // 1. を選択\n\n? Select a language:\n1. Java - MicroProfile / Java EE\n2. Java - Spring Framework\n3. Node\n4. Python\n5. Swift\nEnter a number> 1     // Java EEを選択\n\n? Select a Starter Kit or select the last option for more information:\n1. Backend for Frontend: Java MicroProfile / Java EE Backend\n2. Microservice: Java MicroProfile / Java EE Microservice\n3. Web App: Java MicroProfile / Java EE Basic\n4. Show more details\nEnter a number> 2     // マイクロサービスを選択\n\n\n? Enter a name for your project> capsmaltapp     // アプリプロジェクト名を指定\n\n? Enter a hostname for your project> capsmaltapp // ホスト名を指定(上記と同じでOK)\n? Select from the following DevOps Toolchain and target runtime environment options:\nNote: If you choose to create a DevOps Toolchain, then this machine must be\nconfigured for SSH access to your IBM Cloud Git Lab account at\nhttps://git.ng.bluemix.net/profile/keys in order to download the project code.\n1. IBM DevOps, using Cloud Foundry buildpacks\n2. IBM DevOps, using Kubernetes containers\n3. No DevOps, with manual deployment\nEnter a number> 3     // 今回はIBM Cloud(パブリッククラウド)を使わないので，3.を選択\n\n? Do you want to add services to your project? [y/n]> n   // IBM Cloudのサービスも使わないので，n を選択\n\nThe project, capsmaltapp, has been successfully saved into the current directory.\n```\n\n### ビルド (bx dev build)\n生成された雛形プロジェクトのディレクトリに移動してから，ビルドコマンド `bx dev build` を実行します。\n\n```text\n$ cd capsmaltapp  // 雛形プロジェクトのディレクトリに移動\n$ bx dev build   // --traceオプションで標準出力で確認しながらすすめるのもOK\n\nCreating image bx-dev-java-maven-tools based on Dockerfile-tools...\nImage will have user capsair added\nOK\nCreating a container named 'bx-dev-capsmaltapp-tools' from that image...\nOK\nStarting the 'bx-dev-capsmaltapp-tools' container...\nOK\nBuilding the project in the current directory started at Sun Dec 17 01:16:34 2017\nOK\nStopping the 'bx-dev-capsmaltapp-tools' container...\nOK\n```\n\n### ローカルコンテナで動作確認 (bx dev run)\n`bx dev run` で，ローカル環境のDockerコンテナ上でアプリの動作確認をします。\n\n```text\n$ bx dev run\n\nThe run-cmd option was not specified\nStopping the 'capsmaltapp' container...\nThe 'capsmaltapp' container was not found\nCreating image capsmaltapp based on Dockerfile...\nOK\nCreating a container named 'capsmaltapp' from that image...\nOK\nStarting the 'capsmaltapp' container...\nOK\nLogs for the capsmaltapp container:\n## PropertyMgr::initialize() A RuntimeBuilder helper class has changed the runtime directory name\n## PropertyMgr::initialize() originally specified parameter=defaultServer, new value used=/opt/ibm/wlp/usr/extension/liberty_dc/runtime/was90.wlp17.defaultCellName.opt.ibm.wlp.defaultServer\n## PropertyMgr::initialize() Calling  defineEnvMethodId.......\nTrying to load environment variables from - /opt/ibm/wlp/usr/extension/liberty_dc/runtime/was90.wlp17.defaultCellName.opt.ibm.wlp.defaultServer/dc.env.properties\n## PropertyMgr::initialize() loaded Environment Variables\nLIBRARY_NAME=am_ibm_16\nCalculated native library name as: am_ibm_16\nLaunching defaultServer (WebSphere Application Server 17.0.0.3/wlp-1.0.18.cl170320170927-1854) on IBM J9 VM, version 8.0.5.6 - pxa6480sr5fp6-20171124_02(SR5 FP6) (en_US)\n[AUDIT   ] CWWKE0001I: The server defaultServer has been launched.\n[AUDIT   ] CWWKE0100I: This product is licensed for development, and limited production use. The full license terms can be viewed here: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/license/base_ilan/ilan/17.0.0.3/lafiles/en.html\n[AUDIT   ] CWWKG0093A: Processing configuration drop-ins resource: /opt/ibm/wlp/usr/servers/defaultServer/configDropins/defaults/keystore.xml\n[AUDIT   ] CWWKZ0058I: Monitoring dropins for applications.\n[AUDIT   ] CWPKI0803A: SSL certificate created in 2.811 seconds. SSL key file: /opt/ibm/wlp/output/defaultServer/resources/security/key.jks\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/ibm/api/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/metrics/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/health/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/jwt/\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://148a4a7f545a:9080/capsmaltapp/\n[AUDIT   ] CWWKZ0001I: Application capsmaltapp-1.0-SNAPSHOT started in 3.374 seconds.\n[AUDIT   ] CWWKF0012I: The server installed the following features: [microProfile-1.2, usr:apmDataCollector-7.4, mpFaultTolerance-1.0, servlet-3.1, ssl-1.0, jndi-1.0, mpHealth-1.0, appSecurity-2.0, jsonp-1.0, mpConfig-1.1, jaxrs-2.0, jaxrsClient-2.0, concurrent-1.0, jwt-1.0, mpMetrics-1.0, monitor-1.0, mpJwt-1.0, json-1.0, cdi-1.2, distributedMap-1.0].\n[AUDIT   ] CWWKF0011I: The server defaultServer is ready to run a smarter planet.\n```\n\nこのコンテナプロセスは，`Ctrl + c` でkillできます。\nまだkillせずに，少し動きを確認しましょう。\n\nブラウザで以下を入力して開きます。(アプリ名が異なる場合は読み替えてください。今回はcapsmaltappで作成しています)\n`http://localhost:9080/capsmaltapp` を開きます。\n\n以下のように表示されます。\n![Screen Shot 2017-12-17 at 2.07.26.png](https://qiita-image-store.s3.amazonaws.com/0/69447/d7762da0-7c37-be9f-f714-c0e6d0683222.png)\n\n上手で表示された2つのURLもコピーしてアクセスしてみましょう。\n\"health\" の方は，名前の通りヘルスチェックです。\n\"example\" の方は，RESTのGETで呼べるURIです。\n\nExample.javaは，プロジェクト内のJavaコード(src > main > java > application > rest > v1 > Example.java)を見ると，JAX-RS(Java EE)に従って記載されたリソースクラスであることが分かります。\nシンプルに，文字列を返すだけのGETが一つ用意されています。\n\nまた，[http://localhost:9080](http://localhost:9080) を開くと，WebSphere Liberty (Java EE アプリケーション・サーバー)のWelcomeページが開くことを確認できます。\n\n※WebSphere Libertyとは，マイクロサービス向けに作られた機能備えた超軽量なランタイムです。\n\n![Screen Shot 2017-12-17 at 2.30.15.png](https://qiita-image-store.s3.amazonaws.com/0/69447/fd908318-5a10-53a4-ee4c-b14fdf25008d.png)\n\n次の項でこれまでの流れを簡単に解説します。\n\n### bx dev create/build/run のまとめ (ここでは作業しません)\nさて，行った手順は，**3つのコマンドを順に叩いただけ**ですが，実際は何が行われたのでしょうか。\n\n実は，bx dev createで雛形を作った時点で，Dockerfileが含まれており，その中でWebSphere Libertyのコンテナイメージを取得し，プロジェクトをビルドして新たにDockerイメージを作成するように記載されていたわけです。\n\n細かくは説明しませんが，以下の1行目にpullしてくるイメージ名が指定されています。\n\n```text:Dockerfile\nFROM websphere-liberty:webProfile7\nMAINTAINER IBM Java engineering at IBM Cloud\nCOPY /target/liberty/wlp/usr/servers/defaultServer /config/\n# Install required features if not present, install APM Data Collector\nRUN installUtility install --acceptLicense defaultServer && installUtility install --acceptLicense apmDataCollector-7.4\nRUN /opt/ibm/wlp/usr/extension/liberty_dc/bin/config_liberty_dc.sh -silent /opt/ibm/wlp/usr/extension/liberty_dc/bin/silent_config_liberty_dc.txt\n# Upgrade to production license if URL to JAR provided\nARG LICENSE_JAR_URL\nRUN \\ \n  if [ $LICENSE_JAR_URL ]; then \\\n    wget $LICENSE_JAR_URL -O /tmp/license.jar \\\n    && java -jar /tmp/license.jar -acceptLicense /opt/ibm \\\n    && rm /tmp/license.jar; \\\n  fi\n```\n\nそして，ビルドを経て，bx dev runでは以下が行われました (抜粋)\n\n- docker pullで，DockerHubからイメージ(websphere-liberty/webProfile7)を取得\n- docker buildで，capsmaltappという名前でDockerイメージを生成する\n- docker runで，capsmaltappのコンテナを稼働\n\nコンテナの中では，WebSphere LibertyというJava EEランタイムが動き，その上にアプリケーションをインストールし，REST APIとして動作していたことになります。\n\nつまり，**Microservice Builderのコマンド (bx dev create/build/run)** を使うことで，\n**新規にアプリを作って，ビルドして，ローカル環境のコンテナでの動作確認まではすぐにできていた** わけです。\n\n(実際にアプリを作る場合は，RESTリソースを弄ったり，他APIを呼ぶように構成したり，色々な進め方があります)\n\n\nもう一度，プロジェクト内のファイル群を確認してみると，他にも色々含まれていますね。\nこれらのファイル群は，手元での開発から，リポジトリへの更新，その後IBM Cloud Private(k8s環境)のコンテナに対する自動デプロイするための初期構成として用意されています。\n\n余裕があればご自身で中身を見てみてください。\n\n```text\n$ cd capsmaltapp/\n$ ls\nDockerfile\t\tLICENSE\t\t\tcli-config.yml\t\tpom.xml\nDockerfile-tools\tREADME.md\t\tmanifest.yml\t\tsrc\nJenkinsfile\t\tchart\t\t\tmanifests\n```\n\nだんだん触っていくにつれて，プロジェクトに最初からこういったものが含まれていて，アプリ名が埋め込まれた雛形が用意されることの便利さを感じられると思います。\n\n# (後半戦) IBM Cloud Private上(k8s)に自動デプロイされるように構成する\n仕組みの説明を最初にします。\n\n- 前半戦で作ったソースコード(アプリ)をリポジトリにpush\n- GitHubリポジトリがコードの更新(e.g. git push)を検知してWebhookをJenkinsマスターに送る\n- Jenkinsマスターは，Jenkinsスレーブに，一連のビルドからデプロイまでの操作を命令する\n\n\n**後半戦は以下の3つの作業を行います。**\n\n- GitHubにリポジトリを作成して，Webhookの設定をする\n- IBM Cloud Privateに必要なコンポーネントを導入する\n- IBM Cloud Privateのコンソール画面を操作して，Jenkinsマスターを構成する\n\n## リポジトリ作成とWebhook設定\n### リポジトリ作成と初期コードをpush\nまずは，GitHubの組織とリポジトリを作成します。\n\nブラウザで，[GitHub](https://github.com/)にアクセスします。\n※GitHubに組織を作成していなければ，一つ作ります。\n\n- 組織の作成\n - [GitHubトップページ] > [+アイコン] > [New organization]\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/4ba11fda-5c0e-8de3-11df-55bb7fb8ddb3.png)\n - 組織名やメールアドレス，プラン(Free 無料)などを入力して，ウィザードをすすめる\n - (私の場合は，組織名に msbtechorg を指定)\n- 組織内に新規リポジトリを作成する\n - 組織のページで，[Create New Repository]で **前半戦で作成したプロジェクト名で**，新規にリポジトリ作成 (私の場合，capsmaltapp)\n - 組織名/リポジトリ名 のようになる (下図)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/8c02515a-c5f5-f297-efdd-da7e5c487eaa.png)\n\n\n次に，前半戦で作成したプロジェクト内で，`git init` コマンドを実行して初期化します。\n\n```text\n$ git init\n```\n\nその後，先程GitHubで作成したリポジトリにプロジェクトをpushしてください。\n以下のように実行することになります。(リポジトリのURLは適宜読み替えてください)\n\n```text\n$ git add ./\n$ git commit -m \"Initial commit\"\n$ git remote add origin https://github.com/msbtechorg/capsmaltapp.git   // 自身のリポジトリを指定\n$ git push -u origin master\n```\n\nGitHubの対象リポジトリページにアクセスすると，プロジェクト内のコード群が登録されていることが確認できます。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/0157463b-8d75-68c2-400e-fc5e6ac958d9.png)\n\n### Webhookの設定\nここでは，GitHubのリポジトリ内の更新(e.g. 開発者ソースコードを変更して，pushしたというイベント)をトリガーに，その事実(コードが更新されたこと)を通知する Webhook を設定します。\n\n- GitHubでPersonal Access Tokenを発行する\n - [GitHubログイン] > [Setting] > [Developer settings] > [Personal access tokens] > [Generate new token]\n - Personal Access Tokenでの認可スコープを設定 (下図参照)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/5d8e6585-c2e2-e5ff-cab9-4562694949dd.png)\n - 下にスクロールして，[Generate token]をクリックしてトークンを生成\n - 表示されるトークンをメモ **※一度しか表示されないので注意**(忘れたら取り直し)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/7819a275-e76e-bd7b-c6e5-89836ce1f041.png)\n - (説明のためにSSを載せていますが，通常はセキュアに管理すべきものです。ちなみに今はRevoke済。)\n\n- OAuthを設定します (GitHubのアカウントを使用して，後続の手順で作成するJenkinsにログインできるように，ID/Secretを生成します)\n - [msbtechorg(組織)] > [Settings] > [Developer settings] > [OAuth Apps]\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/58ebff29-4d6c-5fca-6251-2507ebcb090a.png)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/f2820867-3592-8d15-a145-0cc98e337733.png)\n - [New OAuth App] をクリック\n - 次の3項目に対して，値を入力\n - Application name / Homepage URL / Authorization callback URL\n - (10.132.75.83と記載している部分は，自身の環境のものに読み替えてください)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/3eeeb54e-5852-18f3-b077-339387a4a4b3.png)\n\n上記で入力した3項目の解説\n\n|項目|入力値|説明\n|:--|:---|:---|\n|Application name|MSB_OAuth(なんでもOK)|OAuthのID/Secretの組み合わせを識別するための名前|\n|Homepage URL|http://xxx.xxx.xxx.xxx:31000|IBM Cloud Private上のJenkinsマスターのURL (ICPシングルノード構成の場合，ホストIPでOK)|\n|Authorization callback URL|http://xxx.xxx.xxx.xxx:31000/securityRealm/finishLogin|Jenkinsマスターに接続したときに，GitHubアカウントを使った認証・認可を呼び出すためのURL|\n\n - 入力が終われば，[Register application]をクリックして進む\n - 次のページが表示されるので，**Client ID** / **Client Secret** をメモ (※ID/Secretは，いつでも確認できます。)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/a8495b89-a142-fd9f-2523-02b5b64e5ac3.png)\n\n**ここまでで，以下をメモしているはずです。**\n**あとでJenkinsマスターを構成する手順で使用します。**\n\n|項目|値|\n|:--|:--|\n|Personal Access Token|c4b371b33290940e5167f67ad5effa4f1f033118|\n|Client ID|45c465713684b148fdb5|\n|Client Secret|c74034c9aeb791984a67104ff915be1a9018cf52|\n\n- Webhookの設定\n - [msbtechorg(組織)] > [Settings] > [Webhooks] > [Add webhook]\n - Payload URLを設定\n - (私の場合は，`Payload URL = http://10.132.75.83:31000/github-webhook/`)\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/15716ca6-4dbb-d7ff-6739-af246ee55727.png)\n\n\n - **\"Let me select individual events\"** のラジオボタンを選択し，次の項目にチェックを入れます。\n - Pull request / Push / Repository\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/fb014649-f3a7-d3a7-1315-367fd0c86111.png)\n - [Add webhook] をクリックして登録\n\n\n\n## Jenkinsマスターの構成 (IBM Cloud Private上でやること)\nいよいよ，最後の手順です。\nIBM Cloud Private上のコンテナでJenkinsマスターを稼働させます。\n\nJenkinsマスターは，前の手順で用意したWebhookを受け取り，Jenkinsスレーブの各コンテナでビルド・イメージ作成・テスト・デプロイをキックします。\n\nこれを一言で表すと，\"Jenkins Pipelineを動作させる\" \nと言えるかと思います。\n\nでは，以下の作業を実施します。\n\n- Microservice Builder Fabricの導入\n- Microservice Builder Pipelineの導入・構成\n\n### Microservice Builder Fabricの導入\nIBM Cloud Privateコンソールから操作します。\n(私の場合は，`https://10.132.75.83:8443` がコンソールUI) \n\n- [IBM Cloud Privateコンソールにログイン] > [メニューからCatalog]\n- [ibm-microservicebuilder-fabric] を選択\n\n- ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/32cdc317-f014-5a18-3e97-76800f68e92b.png)\n- 右下にある [Configure] をクリック\n- [Release name]に任意の名前を入力 (小文字英数字)\n- [I have read and agreed to the license agreements]にチェックを入れる\n- ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/7065dbbc-8d01-51e1-445a-f487305c54ef.png)\n- 末尾右下にある [Install] をクリック\n\n以上の手順で，IBM Cloud PrivateにMicroservice Builder fabricをコンテナとしてリリースできました。\n簡単に中身を説明します。\n\nMicroservice Builder fabricは，Zipkinによる分散トレースを行う際に使用します。実はそれだけではなく，Microservice Builderで使用するキーストアをsecretとして登録してくれます。\nこのsecretが欲しかったので，最初にfabricの導入を行いました。\n\nsecretは以下kubectlコマンドで確認できます。\n\nローカルPCに [こちらの手順](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-1-kubectl-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB) でkubectlコマンドをインストール済であれば，以下を実行することでsecretを確認できます。\n\n`$ kubectl get secrets`\n\nもし，IBM Cloud Privateのk8sクラスターに接続していない場合は，[こちら](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-2-ibm-cloud-private%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C) を実施してから，コマンド実行します。\n\n<実行結果>\n\n```text\n$ kubectl get secrets\n\nNAME                     TYPE                                  DATA      AGE\ncalico-etcd-secrets      Opaque                                3         7d\ndefault-token-2fcm6      kubernetes.io/service-account-token   3         7d\nmb-keystore              Opaque                                1         1m\nmb-keystore-password     Opaque                                1         1m\nmb-truststore            Opaque                                1         1m\nmb-truststore-password   Opaque                                1         1m\n```\n\n\n\n### Microservice Builder Pipelineの導入・構成\nいよいよ終盤です。2つの操作をします。\n\n1) IBM Cloud PrivateのノードにSSHでログインして，事前設定\n2) IBM Cloud Privateのコンソールから，Microservice Builder Pipelineをコンテナにリリースします\n\n#### 1) IBM Cloud PrivateのノードにSSHでログインして，事前設定\n1)の操作はすべてIBM Cloud Privateのノード内で行います。\nSSHでIBM Cloud Privateのノードにログインします。\n\n```text\n$ ssh capsmalt@10.132.75.83\n$ sudo -i\n# // rootに昇格。今回はk8s環境内の操作はrootで操作していますが，外部公開する場合は適切なユーザー設定をしてください。\n```\n\n1-1) jqのインストール\nJSONの制御をしやすくするツールです。\nすぐ後のステップの中で使用しますのでインストールします。\n\n```text\n# apt install -y jq\n```\n\n1-2) admin.registrykeyの作成\nJenkins PipelineがICP内のDocker registryに接続するためのSecretを作成します。\n\nローカルPCにはKubectlは導入済みかと思いますが，\nIBM Cloud Privateのノード上に未導入の場合は，[Kubectl導入手順](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-1-kubectl-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB)を参考に，Linux用のKubectlを導入しておきましょう。今回に限らず，使いたいケースは出てくると思います。\n\nまた，IBM Cloud Privateのk8sクラスターに接続するために，[Kubectlの接続先の設定](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6#1-2-ibm-cloud-private%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C)をしておきましょう。\n\nKubectlの準備ができたら，以下のコマンドを実行します。\n\n```test\n# kubectl create secret docker-registry admin.registrykey --docker-server=https://mycluster.icp:8500 --docker-username=admin --docker-password=admin --docker-email=null\n```\n\n上記コマンドのオプションは，ICPインストールをデフォルト値で行った場合の例です。\nもし，パスワードを `p@ssw0rD` のように変更している場合は，\n`--docker=password=p@ssw0rD` のように適宜変更してください。\n\n1-3) service accountにsecret設定を反映\n前の手順で作成したadmin.registrykeyを使用するようにservice accountに反映させます\n\n```text\n# kubectl get serviceaccounts default -o json | jq 'del(.metadata.resourceVersion)' | jq 'setpath([\"imagePullSecrets\"];[{\"name\":\"admin.registrykey\"}])' | kubectl replace serviceaccount default -f -\n\nserviceaccount \"default\" replaced\n```\n\n#### 2) IBM Cloud Privateのコンソールから，Microservice Builder Pipelineをコンテナにリリース\n2)の作業は，IBM Cloud Privateコンソールから行います。\n\n- ブラウザでコンソールにログイン (e.g. `https://10.132.75.83:8443`)\n- [メニュー] > [Catalog] > [ibm-microservicebuilder-pipeline] をクリック\n - ![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/64360ca0-5ffb-1625-5d54-026bd273cd00.png)\n- [Configure] をクリックして，以下の項目を設定\n\n(ご自身のGitHubアカウントで用意したものに置き換えてください)\n\n|入力項目|値|説明|\n|:-----|:-----|:-----------|\n|Release name|capsmalt-pipeline|(入力チェックをパスできれば何でもOK)|\n|[ ] I have read ...|チェック入れる|ライセンス確認チェックボックス|\n|Orgs|msbtechorg|GitHubで作成した組織名|\n|RepoPattern|.*|.*の設定で組織内のすべてのリポジトリがPipeline対象になる|\n|OAuth.Token|c4b371b33290940e5167f67ad5effa4f1f033118|GitHubで設定したPersonal Access Token|\n|OAuth.User|capsmalt|GitHubアカウントのユーザー名|\n|App.Id|45c465713684b148fdb5|GitHubで設定したOAuthAppのClient ID|\n|App.Secret|c74034c9aeb791984a67104ff915be1a9018cf52|GitHubで設定したOAuthAppのClient Secret|\n|Admins|capsmalt|GitHubアカウントの管理者権限のあるユーザー名|\n|その他の項目|デフォルト値(or ブランク)|-|\n\n入力後のイメージ図\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/10114a78-d2f2-7d16-b771-5400cfd39b05.png)\n\n- 最後に，入力画面の右下にある [Install] をクリックし，インストールを完了する\n- [ICPコンソールメニュー] > [Workloads] > [Helm releases] でリリースしたもの(capsmalt-pipeline，capsmalt-fabric)を確認できます。\n\n\n## Jenkins Pipelineによる自動デプロイの動作確認 \nIBM Cloud Privateのコンテナ上で動作するJenkinsマスターに接続します。\nブラウザで，`http://10.132.75.83:31000/` を開きます。\n\nOAuthの認可確認画面がでてくるので，GitHubアカウントのパスワードなどを入力し，Jenkinsのコンソールにログインします。 \n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/be47661b-c1ed-288d-4157-0436d64c7b41.png)\n\n自身の組織を選択します。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/822b4822-37a7-81d8-df09-c75d7e2c18ef.png)\n\n組織内に含まれるリポジトリを選択します。(今回は，capsmaltapp)\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/b658690f-0fd6-522e-881f-7505ce30be8a.png)\n\nブランチを選択します。(今回は，masterブランチのみ)\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/35a74f30-f51f-7d5f-3589-a73f822fb538.png)\n\nJenkinsマスターの構成や，GitHubのWebhook構成がちゃんとできていれば，以下図のようなパイプライン画面が確認できます。\nソースコードの更新をトリガーに，自動的にビルドやテスト，デプロイが行われるパイプラインです。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/a4ed6ca8-c50f-cc69-0b2c-1222739bf648.png)\n\nローカルPCで，ソースコードを少し変更してみましょう。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/a088e718-e684-e2d7-84b1-db2363c10f22.png)\n\nなんの面白みもないですが，文字列を変えてみました。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/971561b5-1522-c335-34b7-c4197b3b6dac.png)\n\nGitHubにpushします。\n\n```text\n$ git add ./\n$ git commit -m \"Change msg.\"\n$ git push\n```\n\nブラウザで，確認します。\n1行だったものが2行に増えていませんか？\nリポジトリの更新(Webhook)をJenkinsマスターが受け取って，ICP上でパイプラインを動作させていることが分かります。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/3a83289b-d3da-55ff-84a2-4e8fad7ad4eb.png)\n\nアプリの動作を確認してみます。\n\nブラウザで，ICPコンソールにアクセスします。(`https://10.132.75.83:8443`)\nHelm release一覧から，対象アプリを選択\n[ICPのメニュー] > [Helm releases] > [capsmaltapp]\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/68601b5c-e8b5-1e95-7610-731854e6156a.png)\n\nSERVICE欄にある [capsmaltapp-service] を選択\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/3b03c7fc-7634-d787-11ff-1f376f9dfc9f.png)\n\nNodePort欄の `http 31110/TCP` をクリック (ポート番号は異なります)\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/3b03e3a1-9d70-cf58-5ee0-f9336323e754.png)\n\nコンテナ上のWebSphere Libertyが動作していることが分かります。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/ceeb9ee8-d363-cebe-4112-7e85923aacf7.png)\n\nURLで，REST(GET)のリソースパスを指定しましょう。\n(私の場合，`http://10.132.75.83:31110/capsmaltapp/v1/example`)\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/69447/c3c605c8-4011-e39c-b450-5a2824814adc.png)\n\nさきほどローカルPCで変更して，GitHubにpushしたコードが反映されていることが分かります。\n\n\n# まとめ\n## 本稿で行った初期設定\nIBM Cloud Privateのノード，ICPコンソール，開発端末，GitHub，などいろんな場所で作業をしたので，結構大変だなーと感じた方もいらっしゃるかと思います。\n\nしかし，ざっくり整理すると，実際は下記程度の作業しかしてません。\n\n- Microservice Builderコマンド(bx dev create/build/run)\n - 雛形作成，ビルド，ローカルPCでコンテナ稼働確認\n- GitHubのWebhook構成\n- Microservice Builder Pipeline(Jenkinsマスター)\n - GitHubへのアクセス情報を入力して，Jenkinsマスターを構成 \n\nとは言え，この構成を自らオープンソースで組み上げて構成しようとすると，実はいろんな箇所で骨の折れる作業が発生します。\n\n## 今後つかっていく際にやること\n次回以降はめちゃめちゃ楽です。コード書いてpush。これだけです。\n\n- アプリ改修の場合 (あとは自動デプロイ)\n - コーディング\n - GitHubにpush\n\n- 新規にアプリを追加する場合 (新規にリポジトリを用意するだけでOK。特に設定不要)\n - コーディング\n - GitHubの既存組織に新規アプリ名でリポジトリを作成する\n - GitHubにpush\n\nMicroservice Builderで作ったアプリは，生成された瞬間からCI/CDの枠組みに組み込まれています。\n\nつまり，一度Microservice Builder Pipelineの構成を行うことで，継続的にアプリ更新を行って，IBM Cloud Privateにデプロイされる構成になります。\n\n組織内で標準化に苦労している場合や，毎度CI/CDを含めた構成をプロジェクトごとに用意している方は，ありがたみを実感できると思います。\n\n当然ながら，自由にカスタマイズすることも可能です。\n例えば，\n\n- パイプラインの各ステージ内で，既存のテストツールやロジックを流す\n- ビルドとデプロイを分離する\n- (従来の環境区分けをしたい場合) Prod/Test/Devのように対象を分けてデプロイする\n- その他諸々\n\n\n\n# まとめ\nKubernetes環境(IBM Cloud Private)を題材として，Microservice Builderというツールで，新規アプリ開発〜デプロイ自動化までを試してみました。\n\nMicroservice Builderは，Kubernetesをベースにマイクロサービスの開発・運用を助けてくれます。ただ，まだ一部しか利用できていないので，また実践編を書きたいと思います。\n\n\n参考: \nOfficialマニュアル: [Microservice Builder](https://www.ibm.com/support/knowledgecenter/en/SS5PWC/index.html)\n\nIBM Cloud Private 導入手順 ==> [IBM Cloud Private: Kubernetesをオンプレミス(IaaS)に導入してみる](https://qiita.com/capsmalt/items/d15055ab3cb423d2d7ae)\nCLI導入など ==> [IBM Cloud Private k8sクラスターをCLIで操作してみる](https://qiita.com/capsmalt/items/9f282ce26c58873e22b6)\n\n",
  "coediting": false,
  "comments_count": 0,
  "created_at": "2017-12-17T21:34:59+09:00",
  "group": null,
  "id": "3a03d1f01534aece1b0c",
  "likes_count": 0,
  "private": false,
  "reactions_count": 0,
  "tags": [
    {
      "name": "Jenkins",
      "versions": [
        
      ]
    },
    {
      "name": "docker",
      "versions": [
        
      ]
    },
    {
      "name": "kubernetes",
      "versions": [
        
      ]
    },
    {
      "name": "microservices",
      "versions": [
        
      ]
    },
    {
      "name": "k8s",
      "versions": [
        
      ]
    }
  ],
  "title": "Microservice Builderで新規にアプリを作って，IBM Cloud Private (Kubernetes) に自動デプロイしてみる",
  "updated_at": "2017-12-17T21:34:59+09:00",
  "url": "https://qiita.com/capsmalt/items/3a03d1f01534aece1b0c",
  "user": {
    "description": null,
    "facebook_id": null,
    "followees_count": 21,
    "followers_count": 17,
    "github_login_name": null,
    "id": "capsmalt",
    "items_count": 9,
    "linkedin_id": null,
    "location": null,
    "name": "",
    "organization": null,
    "permanent_id": 69447,
    "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/69447/profile-images/1473698151",
    "twitter_screen_name": "capsmalt",
    "website_url": null
  }
